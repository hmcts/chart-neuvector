apiVersion: v1
kind: ConfigMap
metadata:
  name: neuvector-restapi-config
  namespace: {{ .Release.Namespace }}
  labels:
    chart: {{ template "chart-neuvector.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  config.sh: |
    #!/bin/sh

    set -ex

    # NV API URL. Note just using hostname doesn't always resolve...
    API_URL="https://neuvector-svc-controller.neuvector.svc.cluster.local:10443/v1"

    # KV Flexvol secrets
    NV_ADMIN_PASSWORD=$(cat /kvmnt/neuvector-admin-password)
    NV_NEW_ADMIN_PASSWORD=$(cat /kvmnt/neuvector-new-admin-password)
    NV_LICENSE=$(cat /kvmnt/{{ .Values.keyvault.licensececretname }})
    NV_SLACK_WEBHOOK=$(cat /kvmnt/neuvector-slack-webhook)

    # alias curl for convenience
    _CURL="curl -vk --show-error --fail"

    # Authenticate and check if password has been changed
    echo "Getting default authentication token..."
    set +e
    RESULT=$($_CURL  -H "Content-Type: application/json" -d '{"password": {"username": "admin", "password": "'"$NV_ADMIN_PASSWORD"'"}}' "$API_URL/auth")
    EXIT_CODE=$?
    set -e
    if [ $EXIT_CODE -ne 0 ]
    then
      echo "Getting authentication token..."
      TOKEN=$($_CURL  -H "Content-Type: application/json" -d '{"password": {"username": "admin", "password": "'"$NV_NEW_ADMIN_PASSWORD"'"}}' "$API_URL/auth" | jq -r .token.token)
      _NEW_TOKEN="1"
    else
      TOKEN=$(echo "${RESULT}" | jq -r .token.token)
    fi

    sleep 10

    echo "Accepting EULA..."
    EULA_RESPONSE=$(curl -vk -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" $API_URL/eula)
    echo "${EULA_RESPONSE}"
    EULA=$(echo "${EULA_RESPONSE}" | jq -r .eula.accepted)
    if [[ "$EULA" != "true" ]]
    then
      $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -d '{"eula":{"accepted":true}}' $API_URL/eula
    fi

    echo "Setting license..."
    LICENSE=$($_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" $API_URL/system/license | jq -r .license.info.email)
    echo "Currently registered to $LICENSE"
    if [[ "$LICENSE" == "null" ]]
    then
      $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -d '{"license_key": "'"$NV_LICENSE"'"}' $API_URL/system/license/update
    fi

    # Change admin password
    if [ "$_NEW_TOKEN" == "" ]
    then
      echo "Changing default admin password..."
      $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" $API_URL/user/admin -X PATCH -d '{"config":{"fullname":"admin","password":"'"$NV_ADMIN_PASSWORD"'","new_password":"'"$NV_NEW_ADMIN_PASSWORD"'"}}'
      echo "Re-authenticating..."
      TOKEN=$($_CURL  -H "Content-Type: application/json" -d '{"password": {"username": "admin", "password": "'"$NV_NEW_ADMIN_PASSWORD"'"}}' "$API_URL/auth" | jq -r .token.token)
    fi

    # Set the Slack webhook URL
    echo "Setting Slack webhook URL..."
    $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" $API_URL/system/config -X PATCH -d '{"config":{"webhook_status":true,"webhook_url":"'"$NV_SLACK_WEBHOOK"'"}}'

    # Set Auto-scan
    echo "Setting Auto-scan..."
    $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" $API_URL/scan/config -X PATCH -d '{"config":{"auto_scan":{{ .Values.config.autoScan }}}}'

    # Set admission rules
    if [[ {{ len .Values.rules.admission.rules }} -gt 0 ]]
    then
      {{- range $i, $ar := $.Values.rules.admission.rules }}
      echo "Setting admission rule: '{{ $ar | toJson }}'"

      STATUS_CODE=$(curl -sk -H "X-Auth-Token: $TOKEN" -o /dev/null -w "%{http_code}" $API_URL/admission/rule/{{ add $i 1000 }})
      if [ $STATUS_CODE -eq 404 ]
      then
        # create
       echo "Creating admission rule"
       $_CURL -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -X POST -d '{{ $ar }}' "$API_URL/admission/rule?scope=local"
      else
        # update
        echo "Updating admission rule"
        $_CURL -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -X PATCH -d '{{ $ar }}' "$API_URL/admission/rule?scope=local"
      fi
      {{- end }}
    fi

    echo "Updating state for admission rules..."
    $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -X PATCH \
      -d '{"state":{"enable":{{ .Values.rules.admission.enable }},"mode":"{{ .Values.rules.admission.mode }}","default_action":"{{ .Values.rules.admission.defaultAction }}","adm_client_mode":"{{ .Values.rules.admission.admClientMode }}","adm_client_mode_options":{"service":"{{ .Values.rules.admission.service }}-svc-admission-webhook.{{ .Values.rules.admission.service }}.svc","url":"https://{{ .Values.rules.admission.service }}-svc-admission-webhook.{{ .Values.rules.admission.service }}.svc:443"}}}' \
      $API_URL/admission/state

    # Set response rules
    if [[ {{ len .Values.rules.response.policies }} -gt 0 ]]
    then
      echo "Deleting existing response rules..."
      $_CURL  -H "X-Auth-Token: $TOKEN" -X DELETE "$API_URL/response/rule?scope=local"
      echo "Setting response rules..."
      {{- range $ar := $.Values.rules.response.policies }}
      echo "Setting response rule: '{{ $ar | toJson }}'"
      $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -X PATCH -d '{{ $ar }}' "$API_URL/response/rule?scope=local"
      {{- end }}
    fi

    if [[ {{ len .Values.groups }} -gt 0 ]]
    then
      echo "Adding groups"

      {{- range $ar := $.Values.groups }}
      echo "Setting group: '{{ $ar | toJson }}'"

      GROUP_NAME=$(echo '{{ $ar }}' | jq -r .config.name)

      STATUS_CODE=$(curl -sk -H "X-Auth-Token: $TOKEN" -o /dev/null -w "%{http_code}" "$API_URL/group/${GROUP_NAME}?scope=local")
      if [ $STATUS_CODE -eq 404 ]
      then
        # create
       echo "Creating group for ${GROUP_NAME}"
       $_CURL -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -X POST -d '{{ $ar }}' "$API_URL/group?scope=local"
      else
        # update
        echo "Updating group for ${GROUP_NAME}"
        $_CURL -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -X PATCH -d '{{ $ar }}' "$API_URL/group/${GROUP_NAME}?scope=local"
      fi
      {{- end }}
    fi

    if [[ {{ len .Values.rules.network }} -gt 0 ]]
    then
      {{- range $i, $ar := $.Values.rules.network }}

      STATUS_CODE=$(curl -sk -H "X-Auth-Token: $TOKEN" -o /dev/null -w "%{http_code}" "$API_URL/policy/rule/{{ add $i 1 }}?scope=local")

      if [ $STATUS_CODE -eq 404 ]
      then
        # create
       echo "Creating network rule for id {{ add $i 1 }}"
       $_CURL -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -X PATCH -d '{{ $ar.create }}' "$API_URL/policy/rule?scope=local"
      else
        # update
        echo "Updating network rule for id {{ add $i 1 }}"
        $_CURL -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -X PATCH -d '{{ $ar.update }}' "$API_URL/policy/rule/{{ add $i 1 }}?scope=local"
      fi


      {{- end }}
    fi
