apiVersion: v1
kind: ConfigMap
metadata:
  name: neuvector-restapi-config
  namespace: {{ .Release.Namespace }}
  labels:
    chart: {{ template "chart-neuvector.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  config.sh: |
    #!/bin/sh

    set -e

    # NV API URL. Note just using hostname doesn't always resolve...
    API_URL="https://neuvector-svc-controller.neuvector.svc.cluster.local:10443/v1"

    # KV Flexvol secrets
    NV_ADMIN_PASSWORD=$(cat /kvmnt/neuvector-admin-password)
    NV_NEW_ADMIN_PASSWORD=$(cat /kvmnt/neuvector-new-admin-password)
    NV_LICENSE=$(cat /kvmnt/{{ .Values.keyvault.licensececretname }})
    NV_SLACK_WEBHOOK=$(cat /kvmnt/neuvector-slack-webhook)

    # alias curl for convenience
    _CURL="curl -sk --show-error --fail"

    # Authenticate and check if password has been changed
    echo "Getting default authentication token..."
    TOKEN=$($_CURL  -H "Content-Type: application/json" -d '{"password": {"username": "admin", "password": "'"$NV_ADMIN_PASSWORD"'"}}' "$API_URL/auth" | jq -r .token.token)
    if [[ "$TOKEN" == "" || "$TOKEN" == "null" ]]
    then
      echo "Getting authentication token..."
      TOKEN=$($_CURL  -H "Content-Type: application/json" -d '{"password": {"username": "admin", "password": "'"$NV_NEW_ADMIN_PASSWORD"'"}}' "$API_URL/auth" | jq -r .token.token)
      _NEW_TOKEN="1"
    fi
    
    echo "Accepting EULA..."
    EULA=$($_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" $API_URL/eula | jq -r .eula.accepted)
    if [[ "$EULA" != "true" ]]
    then
      $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -d '{"eula":{"accepted":true}}' $API_URL/eula
    fi

    echo "Setting license..."
    LICENSE=$($_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" $API_URL/system/license | jq -r .license.info.email)
    echo "Currently registered to $LICENSE"
    if [[ "$LICENSE" == "null" ]]
    then
      $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -d '{"license_key": "'"$NV_LICENSE"'"}' $API_URL/system/license/update
    fi

    # Change admin password
    if [ "$_NEW_TOKEN" == "" ]
    then
      echo "Changing default admin password..."
      $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" $API_URL/user/admin -X PATCH -d '{"config":{"fullname":"admin","password":"'"$NV_ADMIN_PASSWORD"'","new_password":"'"$NV_NEW_ADMIN_PASSWORD"'"}}'
      echo "Re-authenticating..."
      TOKEN=$($_CURL  -H "Content-Type: application/json" -d '{"password": {"username": "admin", "password": "'"$NV_NEW_ADMIN_PASSWORD"'"}}' "$API_URL/auth" | jq -r .token.token)
    fi

    # Set the Slack webhook URL
    echo "Setting Slack webhook URL..."
    $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" $API_URL/system/config -X PATCH -d '{"config":{"webhook_status":true,"webhook_url":"'"$NV_SLACK_WEBHOOK"'"}}'

    # Set Auto-scan
    echo "Setting Auto-scan..."
    $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" $API_URL/scan/config -X PATCH -d '{"config":{"auto_scan":true}}'

    # Set deny admission rules
    if [[ {{ len .Values.rules.admission.deny }} -gt 0 ]]
    then
      echo "Deleting existing Deny admission rules..."
      $_CURL  -H "X-Auth-Token: $TOKEN" -X DELETE $API_URL/admission/rules/deny
      echo "Setting Deny admission rules..."
      {{- range $ar := $.Values.rules.admission.deny }}
      echo "Setting deny rule: '{{ $ar | toJson }}'"
      $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -d '{{ $ar }}' $API_URL/admission/rule/deny
      {{- end }}
    fi

    # Set exception admission rules
    if [[ {{ len .Values.rules.admission.exception }} -gt 0 ]]
    then
      echo "Deleting existing Exception admission rules..."
      $_CURL  -H "X-Auth-Token: $TOKEN" -X DELETE $API_URL/admission/rules/exception
      echo "Setting Exception admission rules..."
      {{- range $ar := $.Values.rules.admission.exception }}
      echo "Setting exception rule: '{{ $ar | toJson }}'"
      $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -d '{{ $ar }}' $API_URL/admission/rule/exception
      {{- end }}
    fi

    echo "Updating state for admission rules..."
    $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -X PATCH \
      -d '{"state":{"enable":{{ .Values.rules.admission.enable }},"mode":"{{ .Values.rules.admission.mode }}","default_action":"{{ .Values.rules.admission.defaultAction }}","adm_client_mode":"{{ .Values.rules.admission.admClientMode }}","adm_client_mode_options":{"service":"{{ .Values.rules.admission.service }}-svc-admission-webhook.{{ .Values.rules.admission.service }}.svc","url":"https://{{ .Values.rules.admission.service }}-svc-admission-webhook.{{ .Values.rules.admission.service }}.svc:443"}}}' \
      $API_URL/admission/state

    # Set response rules
    if [[ {{ len .Values.rules.response.policies }} -gt 0 ]]
    then
      echo "Deleting existing response rules..."
      $_CURL  -H "X-Auth-Token: $TOKEN" -X DELETE $API_URL/response/rule
      echo "Setting response rules..."
      {{- range $ar := $.Values.rules.response.policies }}
      echo "Setting response rule: '{{ $ar | toJson }}'"
      $_CURL  -H "Content-Type: application/json" -H "X-Auth-Token: $TOKEN" -X PATCH -d '{{ $ar }}' $API_URL/response/rule
      {{- end }}
    fi
